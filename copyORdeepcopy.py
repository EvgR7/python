# Столкнулся с проблемой чем отличается метод .copy() у списков и функция deepcopy из библиотеки copy
# в итоге выяснилось: что если в списке некоторые объекты, и после создания копий двумя способами, у этих объектов меняются свойства,
# то свойства объектов меняются в списках: исходном, и копии созданной someList.copy(), но при этом не меняются в копии полученной 
# copy.deepcopy(someList).
# Пример: Создадим класс Val где значение val устанавливается при создании и метод, который может это значение менять.
# Создадим список 'а' где элементом с индексом 0 будет объект Val со значение 5, и сделаем 2 копии разными способами.
# Изменим значение объекта Val = 100 распечатаем этот объект в каждом списке, получим что в исходном списке 'a' и копии 
# 'b' полученной a.copy() значение Val изменилось на 100, а значение в копии 'z' copy.deepcopy(a) значение Val не 
# изменилось осталось равно 5

# P.S. срез работает также как someList.copy()

import copy

class Val:
    def __init__(self, a):
        self.val = a
    def __str__(self):
        return str(self.val)
    def chng(self, x):
        self.val = x


v = Val(5)
a = [v]
b = a.copy()
z = copy.deepcopy(a)
v.chng(100)
print(b[0], z[0], a[0])
# вывод будет 100 5 100
